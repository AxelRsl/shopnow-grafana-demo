version: '3.8'

services:
  # ===============================
  # DATABASES & INFRASTRUCTURE
  # ===============================
  
  postgres:
    image: postgres:15-alpine
    container_name: shopnow-postgres
    labels:
      com.grafana.service: postgres
      com.grafana.job: database
      com.grafana.project: shopnow
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-shopnow}
      POSTGRES_USER: ${POSTGRES_USER:-shopnow}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-shopnow123}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./infrastructure/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U shopnow"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - shopnow-network

  redis:
    image: redis:7-alpine
    container_name: shopnow-redis
    labels:
      com.grafana.service: redis
      com.grafana.job: cache
      com.grafana.project: shopnow
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis123}
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "--pass", "${REDIS_PASSWORD:-redis123}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - shopnow-network

  mongodb:
    image: mongo:6
    container_name: shopnow-mongodb
    labels:
      com.grafana.service: mongodb
      com.grafana.job: database
      com.grafana.project: shopnow
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USER:-shopnow}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD:-mongo123}
      MONGO_INITDB_DATABASE: ${MONGODB_DB:-shopnow}
    ports:
      - "27017:27017"
    volumes:
      - mongodb-data:/data/db
      - ./infrastructure/mongodb/init.js:/docker-entrypoint-initdb.d/init.js
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/shopnow --quiet
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - shopnow-network

  # ===============================
  # OBSERVABILITY - GRAFANA ALLOY
  # ===============================
  
  alloy:  
    image: grafana/alloy:latest  
    container_name: shopnow-alloy  
    labels:  
      com.grafana.service: alloy  
      com.grafana.job: observability  
      com.grafana.project: shopnow  
    ports:  
      - "12345:12345"  # Alloy UI  
      - "4317:4317"    # OTLP gRPC  
      - "4318:4318"    # OTLP HTTP  
    volumes:  
      - ./observability/alloy/config.alloy:/etc/alloy/config.alloy  
      - //var/run/docker.sock:/var/run/docker.sock:ro  
    command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy  
    environment:  
      # Prometheus/Mimir  
      - GRAFANA_CLOUD_PROMETHEUS_URL=${GRAFANA_CLOUD_PROMETHEUS_URL}  
      - GRAFANA_CLOUD_PROMETHEUS_USER=${GRAFANA_CLOUD_PROMETHEUS_USER}  
      - GRAFANA_CLOUD_PROMETHEUS_PASSWORD=${GRAFANA_CLOUD_API_KEY}  
      
      # Loki  
      - GRAFANA_CLOUD_LOKI_URL=${GRAFANA_CLOUD_LOKI_URL}  
      - GRAFANA_CLOUD_LOKI_USER=${GRAFANA_CLOUD_LOKI_USER}  
      - GRAFANA_CLOUD_LOKI_PASSWORD=${GRAFANA_CLOUD_API_KEY}  
      
      # Tempo  
      - GRAFANA_CLOUD_TEMPO_ENDPOINT=${GRAFANA_CLOUD_TEMPO_ENDPOINT}  
      - GRAFANA_CLOUD_TEMPO_USER=${GRAFANA_CLOUD_TEMPO_USER}  
      - GRAFANA_CLOUD_TEMPO_PASSWORD=${GRAFANA_CLOUD_API_KEY}  
    depends_on:  
      postgres:  
        condition: service_healthy  
      redis:  
        condition: service_healthy  
      mongodb:  
        condition: service_healthy  
    networks:  
      - shopnow-network  

  # ===============================
  # BACKEND MICROSERVICES
  # ===============================
  
  api-gateway:
    build: 
      context: ./services/api-gateway
      dockerfile: Dockerfile
    container_name: shopnow-api-gateway
    labels:
      com.grafana.service: api-gateway
      com.grafana.job: backend
      com.grafana.project: shopnow
    ports:
      - "${API_GATEWAY_PORT:-3000}:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - SERVICE_NAME=api-gateway
      - PORT=3000
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://alloy:4318
      - OTEL_SERVICE_NAME=api-gateway
      - POSTGRES_URL=postgresql://${POSTGRES_USER:-shopnow}:${POSTGRES_PASSWORD:-shopnow123}@postgres:5432/${POSTGRES_DB:-shopnow}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis123}@redis:6379
      - ORDER_SERVICE_URL=http://order-service:8003
    depends_on:
      - postgres
      - redis
      - alloy
    networks:
      - shopnow-network
    restart: unless-stopped

  order-service:
    build:
      context: ./services/order-service
      dockerfile: Dockerfile
    container_name: shopnow-order-service
    labels:
      com.grafana.service: order-service
      com.grafana.job: backend
      com.grafana.project: shopnow
    ports:
      - "${ORDER_SERVICE_PORT:-8003}:8003"
    environment:
      - SERVICE_NAME=order-service
      - PORT=8003
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://alloy:4318
      - OTEL_SERVICE_NAME=order-service
      - POSTGRES_URL=postgresql://${POSTGRES_USER:-shopnow}:${POSTGRES_PASSWORD:-shopnow123}@postgres:5432/${POSTGRES_DB:-shopnow}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis123}@redis:6379
    depends_on:
      - postgres
      - redis
      - alloy
    networks:
      - shopnow-network
    restart: unless-stopped

volumes:
  postgres-data:
  redis-data:
  mongodb-data:

networks:
  shopnow-network:
    driver: bridge
