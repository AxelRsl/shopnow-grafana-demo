version: '3.8'

services:
  # ===============================
  # DATABASES & INFRASTRUCTURE
  # ===============================
  
  postgres:
    image: postgres:15-alpine
    container_name: shopnow-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-shopnow}
      POSTGRES_USER: ${POSTGRES_USER:-shopnow}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-shopnow123}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./infrastructure/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U shopnow"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - shopnow-network

  redis:
    image: redis:7-alpine
    container_name: shopnow-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis123}
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - shopnow-network

  mongodb:
    image: mongo:6
    container_name: shopnow-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USER:-shopnow}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD:-mongo123}
      MONGO_INITDB_DATABASE: ${MONGODB_DB:-shopnow}
    ports:
      - "27017:27017"
    volumes:
      - mongodb-data:/data/db
      - ./infrastructure/mongodb/init.js:/docker-entrypoint-initdb.d/init.js
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/shopnow --quiet
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - shopnow-network

  # ===============================
  # OBSERVABILITY - GRAFANA ALLOY
  # ===============================
  
  alloy:
    image: grafana/alloy:latest
    container_name: shopnow-alloy
    ports:
      - "12345:12345"  # Alloy UI
      - "4317:4317"    # OTLP gRPC
      - "4318:4318"    # OTLP HTTP
    volumes:
      - ./observability/alloy/config.alloy:/etc/alloy/config.alloy
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    environment:
      - GRAFANA_CLOUD_API_KEY=${GRAFANA_CLOUD_API_KEY}
      - GRAFANA_CLOUD_PROMETHEUS_URL=${GRAFANA_CLOUD_PROMETHEUS_URL}
      - GRAFANA_CLOUD_PROMETHEUS_USER=${GRAFANA_CLOUD_PROMETHEUS_USER}
      - GRAFANA_CLOUD_LOKI_URL=${GRAFANA_CLOUD_LOKI_URL}
      - GRAFANA_CLOUD_LOKI_USER=${GRAFANA_CLOUD_LOKI_USER}
      - GRAFANA_CLOUD_TEMPO_URL=${GRAFANA_CLOUD_TEMPO_URL}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - shopnow-network

  # ===============================
  # BACKEND MICROSERVICES
  # ===============================
  
  api-gateway:
    build: 
      context: ./services/api-gateway
      dockerfile: Dockerfile
    container_name: shopnow-api-gateway
    ports:
      - "${API_GATEWAY_PORT:-3000}:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - SERVICE_NAME=api-gateway
      - PORT=3000
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://alloy:4318
      - OTEL_SERVICE_NAME=api-gateway
      - POSTGRES_URL=postgresql://${POSTGRES_USER:-shopnow}:${POSTGRES_PASSWORD:-shopnow123}@postgres:5432/${POSTGRES_DB:-shopnow}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis123}@redis:6379
      - PAYMENT_SERVICE_URL=http://payment-service:8001
      - INVENTORY_SERVICE_URL=http://inventory-service:8002
      - ORDER_SERVICE_URL=http://order-service:8003
      - RECOMMENDATION_SERVICE_URL=http://recommendation-service:8004
    depends_on:
      - postgres
      - redis
      - alloy
    networks:
      - shopnow-network
    restart: unless-stopped

  payment-service:
    build:
      context: ./services/payment-service
      dockerfile: Dockerfile
    container_name: shopnow-payment-service
    ports:
      - "${PAYMENT_SERVICE_PORT:-8001}:8001"
    environment:
      - SERVICE_NAME=payment-service
      - PORT=8001
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://alloy:4318
      - OTEL_SERVICE_NAME=payment-service
      - POSTGRES_URL=postgresql://${POSTGRES_USER:-shopnow}:${POSTGRES_PASSWORD:-shopnow123}@postgres:5432/${POSTGRES_DB:-shopnow}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis123}@redis:6379
    depends_on:
      - postgres
      - redis
      - alloy
    networks:
      - shopnow-network
    restart: unless-stopped

  inventory-service:
    build:
      context: ./services/inventory-service
      dockerfile: Dockerfile
    container_name: shopnow-inventory-service
    ports:
      - "${INVENTORY_SERVICE_PORT:-8002}:8002"
    environment:
      - SERVICE_NAME=inventory-service
      - PORT=8002
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://alloy:4318
      - OTEL_SERVICE_NAME=inventory-service
      - POSTGRES_URL=postgresql://${POSTGRES_USER:-shopnow}:${POSTGRES_PASSWORD:-shopnow123}@postgres:5432/${POSTGRES_DB:-shopnow}
      - MONGODB_URL=mongodb://${MONGODB_USER:-shopnow}:${MONGODB_PASSWORD:-mongo123}@mongodb:27017/${MONGODB_DB:-shopnow}?authSource=admin
    depends_on:
      - postgres
      - mongodb
      - alloy
    networks:
      - shopnow-network
    restart: unless-stopped

  order-service:
    build:
      context: ./services/order-service
      dockerfile: Dockerfile
    container_name: shopnow-order-service
    ports:
      - "${ORDER_SERVICE_PORT:-8003}:8003"
    environment:
      - SERVICE_NAME=order-service
      - PORT=8003
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://alloy:4318
      - OTEL_SERVICE_NAME=order-service
      - POSTGRES_URL=postgresql://${POSTGRES_USER:-shopnow}:${POSTGRES_PASSWORD:-shopnow123}@postgres:5432/${POSTGRES_DB:-shopnow}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis123}@redis:6379
      - INVENTORY_SERVICE_URL=http://inventory-service:8002
      - PAYMENT_SERVICE_URL=http://payment-service:8001
    depends_on:
      - postgres
      - redis
      - alloy
    networks:
      - shopnow-network
    restart: unless-stopped

  recommendation-service:
    build:
      context: ./services/recommendation-service
      dockerfile: Dockerfile
    container_name: shopnow-recommendation-service
    ports:
      - "${RECOMMENDATION_SERVICE_PORT:-8004}:8004"
    environment:
      - SERVICE_NAME=recommendation-service
      - PORT=8004
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://alloy:4318
      - OTEL_SERVICE_NAME=recommendation-service
      - MONGODB_URL=mongodb://${MONGODB_USER:-shopnow}:${MONGODB_PASSWORD:-mongo123}@mongodb:27017/${MONGODB_DB:-shopnow}?authSource=admin
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis123}@redis:6379
    depends_on:
      - mongodb
      - redis
      - alloy
    networks:
      - shopnow-network
    restart: unless-stopped

  # ===============================
  # FRONTEND
  # ===============================
  
  frontend:
    build:
      context: ./services/frontend
      dockerfile: Dockerfile
    container_name: shopnow-frontend
    ports:
      - "${FRONTEND_PORT:-3001}:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - NEXT_PUBLIC_API_URL=http://localhost:${API_GATEWAY_PORT:-3000}
      - NEXT_PUBLIC_GRAFANA_FARO_URL=${GRAFANA_CLOUD_URL}/faro/api/v1
      - NEXT_PUBLIC_GRAFANA_FARO_APP_NAME=shopnow-frontend
    depends_on:
      - api-gateway
    networks:
      - shopnow-network
    restart: unless-stopped

volumes:
  postgres-data:
  redis-data:
  mongodb-data:

networks:
  shopnow-network:
    driver: bridge
